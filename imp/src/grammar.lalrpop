use crate::syntax::{Cmd,Bexpr,Cop,Bop,Aexpr,Aop};

grammar;

pub Seq: Cmd = {
    <c1:Ctrl> ";" <c2:Seq> => Cmd::Seq(Box::new(c1),Box::new(c2)),
    Ctrl
};

Ctrl: Cmd = {
      "if" <e:Or> "{" <c1:Seq> "}" "else" "{" <c2:Seq> "}"
          => Cmd::If(Box::new(e),Box::new(c1),Box::new(c2)),
      "while" <e:Or> "{" <c:Seq> "}"
          => Cmd::While(Box::new(e),Box::new(c)),
      Ass
};

Ass: Cmd = {
     <x:Var> ":=" <e:Add> => Cmd::Ass(x,Box::new(e)),
     "print" <e:Add>      => Cmd::Print(Box::new(e)),
     "skip"               => Cmd::Skip
};

Or: Bexpr  = {
    <e1:And> "or"  <e2:Or> => Bexpr::Bop(Bop::Or,Box::new(e1),Box::new(e2)),
    And
};

And: Bexpr = {
    <e1:Comp> "and" <e2:And> => Bexpr::Bop(Bop::And,Box::new(e1),Box::new(e2)),
    Comp
};

Comp: Bexpr = {
      <e1:Add> "=?" <e2:Add> => Bexpr::Cop(Cop::Eq,Box::new(e1),Box::new(e2)),
      <e1:Add> "<?" <e2:Add> => Bexpr::Cop(Cop::Lt,Box::new(e1),Box::new(e2)),
      BLit
};

BLit: Bexpr = {
      "true"  => Bexpr::Bool(true),
      "false" => Bexpr::Bool(false),
      "(" <e:Or> ")" => e
};

Add: Aexpr = {
     <e1:Add> "+" <e2:Mul> => Aexpr::Op(Aop::Add,Box::new(e1),Box::new(e2)),
     <e1:Add> "-" <e2:Mul> => Aexpr::Op(Aop::Sub,Box::new(e1),Box::new(e2)),
     Mul
};

Mul: Aexpr = {
     <e1:Mul> "*" <e2:ALit> => Aexpr::Op(Aop::Mul,Box::new(e1),Box::new(e2)),
     ALit
};

ALit: Aexpr = {
      <n:Num> => Aexpr::Int(n),
      <x:Var> => Aexpr::Var(x),
      "(" <e:Add> ")" => e
};

Var: String = <x:r"[a-z]+"> => String::from(x);

Num: i32 = <n:r"[0-9]+"> => n.parse::<i32>().unwrap();
